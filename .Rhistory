d = d[order(d$time),]
out = robustSNHT(data=d[,1], period=period * maxObs, scaled=scaled, estimator
,rmSeasonalPeriod = rmSeasonalPeriod * maxObs)
d[,1]
data = d[, 1]
period
maxObs
period = period * maxObs
rmSeasonalPeriod = rmSeasonalPeriod * maxObs
estimator
if(period != round(period)){
warning("period should be an integer!  Rounding to continue...")
period = round(period)
}
if(!is.numeric(data))
stop("data must be numeric!")
if(2*period>length(data))
stop("period is too large to compute statistics!")
if(rmSeasonalPeriod < Inf )
data = removeSeasonalPeriod(data, period = rmSeasonalPeriod)
x = data
period = rmSeasonalPeriod
1:length(x)
x
timeOfPeriod = (time - time[1]) %% period
sum(!is.na(x))
install.packages("~/GitHub/Stan-Norm-Hom-Test/snht_1.0.1.tar.gz", type = "src",
repo = NULL)
library(snht)
snht:::removeSeasonalPeriod
exp(3)
i = 0
while(TRUE){
n = round(exp(runif(1,min=1, max=3)))
data = rnorm(n)
period = runif(1, min = 1, max = n/2)
robust = sample(c(T, F), size = 1)
if(sample(c(T, F), size = 1)){
time = 1:n + rnorm(n, sd = .3)
} else {
time = NULL
}
scaled = sample(c(T, F), size = 1)
if(sample(c(T, F), size = 1)){
rmSeasonalPeriod = Inf
} else {
rmSeasonalPeriod = runif(1, min = 1, max = n/2)
}
snht(data, period, robust, time, scaled, rmSeasonalPeriod)
i = i + 1
cat("Run number", i, "completed.\n")
}
n
data
rmSeasonalPeriod
robust
time
scaled
if(period != round(period)){
warning("period should be an integer!  Rounding to continue...")
period = round(period)
}
if(!is.numeric(data))
stop("data must be numeric!")
if(2*period>length(data))
stop("period is too large to compute statistics!")
if(!is.null(time))
if(length(time)!=length(data))
stop("If time is not NULL, it must be the same length as data!")
period
if(rmSeasonalPeriod < Inf & rmSeasonalPeriod > length(data)/2)
stop("Seasonal period must be <= half of the number of observations")
!is.null(time)
!robust
out = robustSNHT(data, period, scaled = scaled
,rmSeasonalPeriod = rmSeasonalPeriod, ...)
out = robustSNHT(data, period, scaled = scaled
,rmSeasonalPeriod = rmSeasonalPeriod)
estimator = function(x, minObs = 5){
#minObs arbitrarilty set to 5, want to ensure a decent number of values
x = x[!is.na(x)]
if(length(x) < minObs) #Too many NA values, don't return a result
return(c(NA, NA))
if(max(table(x)) > length(x) / 2) #Too many duplicate values, MAD will be 0
return(c(NA, NA))
fit = MASS::huber(x)
return(c(fit[[1]], fit[[2]]))
}
if(period != round(period)){
warning("period should be an integer!  Rounding to continue...")
period = round(period)
}
if(!is.numeric(data))
stop("data must be numeric!")
if(2*period>length(data))
stop("period is too large to compute statistics!")
if(rmSeasonalPeriod < Inf )
data = removeSeasonalPeriod(data, period = rmSeasonalPeriod)
data = snht:::removeSeasonalPeriod(data, period = rmSeasonalPeriod)
Means = zoo::rollapply(data, width=period, by=1, FUN=estimator)
n = zoo::rollapply(data, width=period, by=1, FUN=function(x) sum(!is.na(x)) )
Means
data
estimator
i = 0
while(TRUE){
n = round(exp(runif(1,min=1, max=3)))
data = rnorm(n)
period = runif(1, min = 1, max = n/2)
robust = sample(c(T, F), size = 1)
if(n <= 10) # Huber estimator assumes it has >= 5 obs
robust = FALSE
if(sample(c(T, F), size = 1)){
time = 1:n + rnorm(n, sd = .3)
} else {
time = NULL
}
scaled = sample(c(T, F), size = 1)
if(sample(c(T, F), size = 1)){
rmSeasonalPeriod = Inf
} else {
rmSeasonalPeriod = runif(1, min = 1, max = n/2)
}
snht(data, period, robust, time, scaled, rmSeasonalPeriod)
i = i + 1
cat("Run number", i, "completed.\n")
}
data
period
robust
snht(data, period, robust, time, scaled, rmSeasonalPeriod)
if(period != round(period)){
warning("period should be an integer!  Rounding to continue...")
period = round(period)
}
if(!is.numeric(data))
stop("data must be numeric!")
if(2*period>length(data))
stop("period is too large to compute statistics!")
if(!is.null(time))
if(length(time)!=length(data))
stop("If time is not NULL, it must be the same length as data!")
if(rmSeasonalPeriod < Inf & rmSeasonalPeriod > length(data)/2)
stop("Seasonal period must be <= half of the number of observations")
if(!is.null(time)){
!is.null(time)
!robust
n
out = robustSNHT( data, period=period, scaled=scaled, estimator=function(x){
x = x[!is.na(x)]
return( c(mean(x), sd(x)) )
}, rmSeasonalPeriod = rmSeasonalPeriod )
estimator=function(x){
x = x[!is.na(x)]
return( c(mean(x), sd(x)) )
}
if(period != round(period)){
warning("period should be an integer!  Rounding to continue...")
period = round(period)
}
if(!is.numeric(data))
stop("data must be numeric!")
if(2*period>length(data))
stop("period is too large to compute statistics!")
rmSeasonalPeriod < Inf
data = removeSeasonalPeriod(data, period = rmSeasonalPeriod)
data = snht:::removeSeasonalPeriod(data, period = rmSeasonalPeriod)
data
Means = zoo::rollapply(data, width=period, by=1, FUN=estimator)
Means
n = zoo::rollapply(data, width=period, by=1, FUN=function(x) sum(!is.na(x)) )
n
rMeans = Means[(period+2):nrow(Means),]
period
Means
(period+2):nrow(Means)
(period+2)
period
n
data
i = 0
while(TRUE){
n = round(exp(runif(1,min=1, max=3)))
data = rnorm(n)
period = runif(1, min = 1, max = n/2)
if(round(period) >= n/2)
period = period - 1 # don't let period get too big
robust = sample(c(T, F), size = 1)
if(n <= 10) # Huber estimator assumes it has >= 5 obs
robust = FALSE
if(sample(c(T, F), size = 1)){
time = 1:n + rnorm(n, sd = .3)
} else {
time = NULL
}
scaled = sample(c(T, F), size = 1)
if(sample(c(T, F), size = 1)){
rmSeasonalPeriod = Inf
} else {
rmSeasonalPeriod = runif(1, min = 1, max = n/2)
}
snht(data, period, robust, time, scaled, rmSeasonalPeriod)
i = i + 1
cat("Run number", i, "completed.\n")
}
period
n
install.packages("~/GitHub/Stan-Norm-Hom-Test/snht_1.0.1.tar.gz", type = "src",
repo = NULL)
library(snht)
snht
log(5)
qplot(round(exp(runif(1,min=1.61, max=3))))
library(ggplot2)
qplot(round(exp(runif(1,min=1.61, max=3))))
qplot(round(exp(runif(100,min=1.61, max=3))))
qplot(round(exp(runif(10000,min=1.61, max=3))))
i = 0
while(TRUE){
n = round(exp(runif(1,min=1.61, max=3)))
data = rnorm(n)
period = runif(1, min = 1, max = n/2)
if(round(period) >= n/2)
period = period - 1 # don't let period get too big
robust = sample(c(T, F), size = 1)
if(n <= 10) # Huber estimator assumes it has >= 5 obs
robust = FALSE
if(sample(c(T, F), size = 1)){
time = 1:n + rnorm(n, sd = .3)
} else {
time = NULL
}
scaled = sample(c(T, F), size = 1)
if(sample(c(T, F), size = 1)){
rmSeasonalPeriod = Inf
} else {
rmSeasonalPeriod = runif(1, min = 1, max = n/2)
}
snht(data, period, robust, time, scaled, rmSeasonalPeriod)
i = i + 1
cat("Run number", i, "completed.\n")
}
data
period
robust
time
if(period != round(period)){
warning("period should be an integer!  Rounding to continue...")
period = round(period)
}
if(!is.numeric(data))
stop("data must be numeric!")
if(2*period >= length(data))
stop("period is too large to compute statistics!")
if(!is.null(time))
if(length(time) != length(data))
stop("If time is not NULL, it must be the same length as data!")
if(rmSeasonalPeriod < Inf & rmSeasonalPeriod > length(data)/2)
stop("Seasonal period must be <= half of the number of observations")
if(length(data) < 5)
stop("snht requires at least 5 observations!")
if(!is.null(time)){
!is.null(time)
!robust
out = robustSNHT( data, period=period, scaled=scaled, estimator=function(x){
x = x[!is.na(x)]
return( c(mean(x), sd(x)) )
}, rmSeasonalPeriod = rmSeasonalPeriod )
estimator=function(x){
x = x[!is.na(x)]
return( c(mean(x), sd(x)) )
}
rmSeasonalPeriod
if(period != round(period)){
warning("period should be an integer!  Rounding to continue...")
period = round(period)
}
if(!is.numeric(data))
stop("data must be numeric!")
if(2*period>length(data))
stop("period is too large to compute statistics!")
if(length(data) < 5)
stop("snht requires at least 5 observations!")
if(rmSeasonalPeriod < Inf)
data = removeSeasonalPeriod(data, period = rmSeasonalPeriod)
Means = zoo::rollapply(data, width=period, by=1, FUN=estimator)
Means
n = zoo::rollapply(data, width=period, by=1, FUN=function(x) sum(!is.na(x)) )
n
rMeans = Means[(period+2):nrow(Means),]
rN = n[(period+2):nrow(Means)]
lMeans = Means[1:nrow(rMeans),]
lN = n[1:nrow(rMeans)]
nrow(rMeans)
rMeans
(period+2)
nrow(Means)
NROW(rMeans)
if(2 * period > length(data) - 1)
stop("period is too large to compute statistics!")
2 * period
length(data) - 1
if(2 * period >= length(data) - 1)
stop("period is too large to compute statistics!")
if(2 * period >= length(data) - 1)
stop("period is too large to compute statistics!")
period
n
data
n = 7
period
round(2 * period) >= n - 1
while(round(2 * period) >= n - 1)
period = period - 1 # don't let period get too big
period
i = 0
while(TRUE){
n = round(exp(runif(1,min=1.61, max=3)))
data = rnorm(n)
period = runif(1, min = 1, max = n/2)
while(round(2 * period) >= n - 1)
period = period - 1 # don't let period get too big
robust = sample(c(T, F), size = 1)
if(n <= 10) # Huber estimator assumes it has >= 5 obs
robust = FALSE
if(sample(c(T, F), size = 1)){
time = 1:n + rnorm(n, sd = .3)
} else {
time = NULL
}
scaled = sample(c(T, F), size = 1)
if(sample(c(T, F), size = 1)){
rmSeasonalPeriod = Inf
} else {
rmSeasonalPeriod = runif(1, min = 1, max = n/2)
}
snht(data, period, robust, time, scaled, rmSeasonalPeriod)
i = i + 1
cat("Run number", i, "completed.\n")
}
n
period
2 * round(period) >= n - 1
i = 0
while(TRUE){
n = round(exp(runif(1,min=1.61, max=3)))
data = rnorm(n)
period = runif(1, min = 1, max = n/2)
while(2 * round(period) >= n - 1)
period = period - 1 # don't let period get too big
robust = sample(c(T, F), size = 1)
if(n <= 10) # Huber estimator assumes it has >= 5 obs
robust = FALSE
if(sample(c(T, F), size = 1)){
time = 1:n + rnorm(n, sd = .3)
} else {
time = NULL
}
scaled = sample(c(T, F), size = 1)
if(sample(c(T, F), size = 1)){
rmSeasonalPeriod = Inf
} else {
rmSeasonalPeriod = runif(1, min = 1, max = n/2)
}
snht(data, period, robust, time, scaled, rmSeasonalPeriod)
i = i + 1
cat("Run number", i, "completed.\n")
}
exp(10)
i = 0
while(TRUE){
n = round(exp(runif(1,min=1.61, max=10)))
data = rnorm(n)
period = runif(1, min = 1, max = n/2)
while(2 * round(period) >= n - 1)
period = period - 1 # don't let period get too big
robust = sample(c(T, F), size = 1)
if(n <= 10) # Huber estimator assumes it has >= 5 obs
robust = FALSE
if(sample(c(T, F), size = 1)){
time = 1:n + rnorm(n, sd = .3)
} else {
time = NULL
}
scaled = sample(c(T, F), size = 1)
if(sample(c(T, F), size = 1)){
rmSeasonalPeriod = Inf
} else {
rmSeasonalPeriod = runif(1, min = 1, max = n/2)
}
snht(data, period, robust, time, scaled, rmSeasonalPeriod)
i = i + 1
cat("Run number", i, "completed.\n")
}
warnings()
source('~/GitHub/sws_imputation/faoswsProductionImputation/R/defaultImputationParameters.R', echo=TRUE)
source('~/GitHub/sws_imputation/faoswsProductionImputation/R/assignParameters.R', echo=TRUE)
source('~/GitHub/sws_imputation/faoswsProductionImputation/R/ensureImputationParameters.R', echo=TRUE)
source('~/GitHub/sws_imputation/faoswsProductionImputation/R/defaultImputationParameters.R', echo=TRUE)
assignParameters(defaultImputationParameters())
for(file in dir("GitHub/sws_imputation/faoswsProductionImputation/R/", full.names = TRUE))
source(file)
assignParameters(defaultImputationParameters())
parameterList
ls()
parameterList = defaultImputationParameters()
parameterList
names(parameterList)
imputationParameters = c("yearValue", "byKey", "ensembleModels",
"restrictWeights", "maximumWeights", "plotImputation", "errorType",
"errorFunction", "groupCount", "missingFlag", "imputationFlag",
"newMethodFlag", "flagTable", "ensuredData", "ensuredFlagTable",
"parametersAssigned", "imputationValueColumn", "imputationFlagColumn",
"imputationMethodColumn")
assignParameters(defaultImputationParameters())
assignParameters(defaultImputationParameters())
stopifnot(!is.null(imputationParameters))
assignParameters(imputationParameters)
imputationParameters
imputationParameters = defaultImputationParameters()
imputationParameters
assignParameters(imputationParameters)
if(!ensuredData)
ensureData(data = data)
if(!ensuredFlagTable)
ensureFlagTable(flagTable = flagTable, data = data)
source("GitHub/Italian/runVocab.R")
vocabFile
head(vocabFile
)
vocabFile[5, ]
vocabFile[5, 2]
vocabFile[5, 2] = "avere finito"
vocabFile[vocabFile[, 1] == "plate"]
vocabFile[vocabFile[, 1] == "plate",]
vocabFile[vocabFile[, 1] == "plate", 2]
vocabFile[vocabFile[, 1] == "plate", 2] = "piatto, piastra"
save(vocabFile, file = "GitHub/Italian/Josh.RData")
source("GitHub/Italian/runVocab.R")
source("GitHub/Italian/runVocab.R")
vocabFile[vocabFile[, 2]=="spesso", ]
vocabFile[vocabFile[, 2]=="spesso", 3]
vocabFile[vocabFile[, 2]=="spesso", 3] = 15
save(vocabFile, file = "GitHub/Italian/Josh.RData")
source("GitHub/Italian/runVocab.R")
head(vocabFile)
vocabFile[2, ]
vocabFile[2, 1] = "to win, conjugated in past participle"
vocabFile[vocabFile[, 2] == "avere bevuto", ]
vocabFile[vocabFile[, 2] == "avere bevuto", 3] = 2
vocabFile[vocabFile[, 2] == "avere venuto", ]
vocabFile[vocabFile[, 2] == "avere venuto", 2] = "essere venuto/a/i/e"
save(vocabFile, file = "GitHub/Italian/Josh.RData")
source("GitHub/Italian/runVocab.R")
source("GitHub/Italian/runVocab.R")
temp = read.csv(file = "GitHub/Italian/Josh.csv")
install.packages("data.table")
install.packages("GitHub/sws_imputation/faoswsImputation_5.0.tar.gz", type = "src", repo = NULL)
library(data.table)
sessionInfo()
install.packages("GitHub/sws_util/faoswsUtil_0.1.3.tar.gz", type = "src", repo = NULL)
install.packages("GitHub/sws_imputation/faoswsProduction_4.1.tar.gz", type = "src", repo = NULL)
library(faoswsProduction)
library(faoswsImputation)
library(faoswsUtil)
install.packages("GitHub/sws_seed/faoswsSeed_1.0.0.tar.gz", type = "src", repo = NULL)
install.packages("RJSONIO")
install.packages("GitHub/sws_seed/faoswsSeed_1.0.0.tar.gz", type = "src", repo = NULL)
ls
library(faoswsSeed)
seedData
data(seedData)
vignettes(all = FALSE)
vignette(all = FALSE)
vignette("faoswsSeed")
install.packages("GitHub/sws_seed/faoswsSeed_1.0.0.tar.gz", type = "src", repo = NULL)
library(faoswsSeed)
seedData
vignette("faoswsSeed")
sessionInfo()
install.packages("knitr")
library(knitr)
sessionInfo()
library(faoswsSeed)
devtools::document("GitHub/sws_seed/faoswsSeed/")
devtools::document("GitHub/sws_seed/faoswsSeed/")
source("GitHub/Italian/runVocab.R")
param
stop("Invalid values of method and/or d!  method must be",
"'constrOptim' or 'nlminb' and d must be 1 or 2")
stop("Invalid values of method and/or d!  method must be ",
"'constrOptim' or 'nlminb' and d must be 1 or 2")
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/robustST_once_k.R', echo=TRUE)
source("Github/Italian/runVocab.R")
Sys.info()[4]
if(Sys.info()[4] == "JOSH_LAPTOP") setwd("~/Documents/GitHub/")
setwd("~/GitHub/")
if(Sys.info()[4] == "JOSH_LAPTOP") setwd("~/GitHub/")
setwd("MCLE/Robust-Skew-t/")
devtools::document()
devtools::document("robustST/")
devtools::document("robustST/")
devtools::document("robustST/")
system("R CMD build robustST")
packages = dir(".", pattern = "robustST.*tar.gz")
packages
versions = gsub("([a-zA-Z]*_|\\.tar\\.gz)", "", packages)
versions
system(paste0("R CMD check robustST_", max(versions), ".tar.gz"))
setwd("..")
library(robustST)
?robustST
